Trying out [[https://adventofcode.com/2024/][advent of code]] with clojure in an org mode file.

* Setup
#+html:<details><summary>Setup</summary>
#+BEGIN_SRC emacs-lisp :results silent
(require 'ob-clojure)
(setq org-babel-clojure-backend 'cider)
#+END_SRC

sanity:
#+begin_src clojure :results silent
(+ 1 2)
#+end_src

#+begin_src clojure :results silent
(ns milk.and.cookies
  (:require [clojure.java.shell :as shell]
            [clojure.string :as string]
            [babashka.fs :as fs]))

(def AOC_SESSION (string/trim (:out (shell/sh "bash" "-i" "-c" "echo $AOC_SESSION"))))

(defn get-input [day & split?]
  (let [year 2024
        ;; ~/.cache/aoc
        cache-file (fs/file (fs/xdg-cache-home) (format "aoc/%s/%s.txt" year day))]
    (fs/create-dirs (fs/parent cache-file))
    (format "https://adventofcode.com/%s/day/%s/input" year day)
    ;; (fs/delete cache-file)
    (when-not (fs/exists? cache-file)
      (spit cache-file
            (:out (shell/sh
                   "curl" (format "https://adventofcode.com/%s/day/%s/input" year day)
                   "-X" "GET"
                   "-H" (format "Cookie: session=%s" AOC_SESSION))))) ; https://github.com/wimglenn/advent-of-code-wim/issues/1
    (if split?
      (string/split-lines (slurp cache-file))
      (slurp cache-file))))
#+end_src
#+html:</details>

* COMMENT Day N

#+html:<details><summary><h2>Part 1</h2></summary>
#+begin_src clojure :results silent
;; todo
#+end_src
#+html:</details>

#+html:<details><summary><h2>Part 2</h2></summary>
#+begin_src clojure :results silent
;; todo
#+end_src
#+html:</details>

* Day 1: Historian Hysteria

#+html:<details><summary><h2>Part 1</h2></summary>
#+begin_src clojure :results silent
(ns milk.and.cookies)

(let [nums (map Integer/parseInt (string/split (get-input "1") #"(\n|   )"))
      list1 (sort (take-nth 2 nums))
      list2 (sort (take-nth 2 (drop 1 nums)))]
  (->> (interleave list1 list2)
       (partition 2)
       (map (partial apply -))
       (map abs)
       (apply +)))
#+end_src
#+html:</details>

#+html:<details><summary><h2>Part 2</h2></summary>
#+begin_src clojure :results silent
(ns milk.and.cookies)

(let [nums (map Integer/parseInt (string/split (get-input "1") #"(\n|   )"))
      list1 (take-nth 2 nums)
      list2 (take-nth 2 (drop 1 nums))
      freqs (frequencies list2)]

  (->> list1
       (map (fn [n] (* n (or (get freqs n) 0))))
       (apply +)))
#+end_src
#+html:</details>
