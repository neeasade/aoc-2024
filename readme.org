It's [[https://adventofcode.com/2024/][advent of code]] in clojure. Have some milk and cookies: üç™ü•õüç™üç™

#+html:<details><summary>Setup</summary>
#+BEGIN_SRC emacs-lisp :results silent
(require 'ob-clojure)
(setq org-babel-clojure-backend 'cider)

(defun ns/insert-block ()
  (interactive)
  (insert
   (format
    "#+html:<details><summary>Part %s</summary>
,#+begin_src clojure
(get-input \"n\")
;; in progress
,#+end_src
,#+html:</details>"
    (read-string "part 1 or 2: "))))
#+END_SRC

#+begin_src clojure :results silent
(ns user
  (:require [clojure.java.shell :as shell]
            [clojure.string :as string]
            [babashka.fs :as fs]))
#+end_src

#+begin_src clojure :results silent
(defn get-input [day]
  ;; ~/.cache/aoc
  (let [year 2024
        cache-file (fs/file (fs/xdg-cache-home) (format "aoc/%s/%s.txt" year day))
        ;; https://github.com/wimglenn/advent-of-code-wim/issues/1
        session (string/trim (:out (shell/sh "bash" "-i" "-c" "echo $AOC_SESSION")))]
    (fs/create-dirs (fs/parent cache-file))
    ;; (fs/delete cache-file)
    (when-not (fs/exists? cache-file)
      (spit (str (fs/strip-ext cache-file) "_example.txt")
            (->> (format "curl 'https://adventofcode.com/%s/day/%s' | pup ':contains(\"example\") + pre > code text{}'" year day)
                 (shell/sh "sh" "-c")
                 (:out)))

      (spit cache-file
            (:out (shell/sh
                   "curl" (format "https://adventofcode.com/%s/day/%s/input" year day)
                   "-X" "GET"
                   "-H" (format "Cookie: session=%s" session)))))
    (slurp cache-file)))
#+end_src
#+html:</details>

*** DONE Day 1: [[https://adventofcode.com/2024/day/1][Historian Hysteria]]
CLOSED: [2024-12-15 Sun 07:31]

#+html:<details><summary>Part 1</summary>
#+begin_src clojure
(let [nums (map Integer/parseInt (string/split (get-input "1") #"(\n|   )"))
      list1 (sort (take-nth 2 nums))
      list2 (sort (take-nth 2 (drop 1 nums)))]
  (->> (interleave list1 list2)
       (partition 2)
       (map (partial apply -))
       (map abs)
       (apply +)))
#+end_src

#+RESULTS:
: 1341714

Bonus: uiua

#+begin_src uiua
# Uiua 0.14.0-dev.5
&fras "1.txt"
/+‚â°‚åµ-‚ä¢‚üú‚ä£‚â°‚çÜ‚çâ‚äú(‚äú‚ãï‚ä∏‚â†@ )‚ä∏‚â†@\n
#+end_src
#+html:</details>

#+html:<details><summary>Part 2</summary>
#+begin_src clojure
(let [nums (map Integer/parseInt (string/split (get-input "1") #"(\n|   )"))
      list1 (take-nth 2 nums)
      list2 (take-nth 2 (drop 1 nums))
      freqs (frequencies list2)]
  (->> list1
       (map (fn [n] (* n (or (get freqs n) 0))))
       (apply +)))
#+end_src

#+RESULTS:
: 27384707

#+html:</details>

*** DONE Day 2: [[https://adventofcode.com/2024/day/2][Red-Nosed Reports]]
CLOSED: [2024-12-15 Sun 07:31]

#+html:<details><summary>Part 1</summary>
#+begin_src clojure
(let [levels (string/split-lines (get-input "2"))
      levels (map #(map Integer/parseInt (string/split % #" ")) levels)]
  (->> levels
       (remove (fn [level]
                 ;; increasing/decreasing, set cast for same floor case
                 (not (or (= (sort > (set level)) level)
                          (= (sort < (set level)) level)))))
       (remove (fn [level]
                 (->> (partition 2 1 level)
                      (map (fn [[cur next]]
                             (<= 1 (abs (- cur next)) 3)))
                      (some false?))))
       (count)))
#+end_src

#+RESULTS:
: 606

#+html:</details>

#+html:<details><summary>Part 2</summary>
#+begin_src clojure
(defn valid-level? [level]
  (and
   ;; increasing/decreasing
   (or (= (sort > (set level)) level)
       (= (sort < (set level)) level))
   ;; floor transition in range
   (not (->> (partition 2 1 level)
             (map (fn [[cur next]]
                    (<= 1 (abs (- cur next)) 3)))
             (some false?)))))

;; https://stackoverflow.com/a/24553906
(defn drop-nth [n coll]
  (keep-indexed #(if (not= %1 n) %2) coll))

(let [levels (string/split-lines (get-input "2"))
      levels (map #(map Integer/parseInt (string/split % #" ")) levels)]
  (->> levels
       (filter (fn [level]
                 (or (valid-level? level)    ; already valid?
                     ;; dampener time
                     (some valid-level?
                           (map #(drop-nth % level)
                                (-> level count range))))))
       (count)))

#+end_src

#+RESULTS:
: 644

#+html:</details>

*** DONE Day 3: [[https://adventofcode.com/2024/day/3][Mull It Over]]
CLOSED: [2024-12-15 Sun 07:31]

#+html:<details><summary>Part 1</summary>
#+begin_src clojure
(->> (get-input "3")
     (re-seq #"mul\((\d{1,3}),(\d{1,3})\)")
     (map (fn [[_ x y]] (* (parse-long x) (parse-long y))))
     (apply +))
#+end_src

#+RESULTS:
: 170068701

#+html:</details>

#+html:<details><summary>Part 2</summary>
#+begin_src clojure
(->> (get-input "3")
     (re-seq #"(mul|do|don't)\(((\d{1,3}),(\d{1,3}))?\)")
     (reduce (fn [state [_ op _ x y]]
               (condp = op
                 "do" (assoc state :enabled? true)
                 "don't" (assoc state :enabled? false)
                 "mul" (if (:enabled? state)
                         (update state :sum (partial + (* (parse-long x) (parse-long y))))
                         state)))
             {:enabled? true
              :sum 0})
     :sum)
#+end_src

#+RESULTS:
: 78683433

#+html:</details>

*** DONE Day 4: [[https://adventofcode.com/2024/day/4][Ceres Search]]
CLOSED: [2024-12-15 Sun 07:31]

#+html:<details><summary>Part 1</summary>
#+begin_src clojure
(let [input (string/split-lines (get-input "4"))
      dirs (for [x [-1 0 1]
                 y [-1 0 1]]
             [x y])
      look (fn [[x y]] (-> input (get x []) (get y nil)))
      move (fn [[x y] [xx yy]] [(+ x xx) (+ y yy)])
      peek (fn [coord dir] (map look (reductions move coord (repeat 3 dir))))]
  (->> (for [x (range (count (first input)))
             y (range (count input))
             :when (= (look [x y]) \X)]
         (for [dir dirs]
           (= (peek [x y] dir)
              (seq "XMAS"))))
       (flatten)
       (filter true?)
       (count)))
#+end_src

#+RESULTS:
: 2685

#+html:</details>

#+html:<details><summary>Part 2</summary>
#+begin_src clojure
(let [input (string/split-lines (get-input "4"))
      h (count input)
      w (count (first input))
      corner1 [[-1 -1] [1 1]]
      corner2 [[-1 1] [1 -1]]
      move (fn [[x y] [xx yy]] [(+ x xx) (+ y yy)])
      look (fn [[x y]] (-> input (get x []) (get y nil)))]
  (->> (for [x (range w)
             y (range h)
             :when (= (look [x y]) \A)]
         (and (= (set "SM") (set (map #(-> % (move [x y]) look) corner1)))
              (= (set "SM") (set (map #(-> % (move [x y]) look) corner2)))))
       (filter true?)
       (count)))
#+end_src

#+RESULTS:
: 2048

#+html:</details>

*** TODO Day 5: [[https://adventofcode.com/2024/day/5][Print Queue]]

#+html:<details><summary>Part 1</summary>
#+begin_src clojure
;; I should do this better later lmao
(let [[rules manuals] (string/split (get-input "5") #"\n\n")
      middle (fn [v] (nth v (quot (count v) 2)))
      rules (map (fn [rule]
                   (let [[a b] (string/split rule #"\|")]
                     [[a b] (re-pattern (format ".*%s(?!.*%s).*" b a))]))
                 (string/split-lines rules))]
  (->> (string/split-lines manuals)
       (filter (fn [manual] (every? (fn [[[a b] rule]]
                                      (if (and (string/includes? manual a)
                                               (string/includes? manual b))
                                        (re-matches rule manual)
                                        true)) rules)))
       (map #(string/split % #","))
       (map middle)
       (map parse-long)
       (reduce +)))
#+end_src

#+RESULTS:
: 5651

#+html:</details>

*** DONE Day 6: [[https://adventofcode.com/2024/day/6][Guard Gallivant]]
CLOSED: [2024-12-15 Sun 07:32]

#+html:<details><summary>Part 1</summary>
#+begin_src clojure
(let [input (string/split-lines (get-input "6"))
      look (fn [[x y]] (-> input (get y []) (get x nil)))
      ;; ugh
      position (loop [x 0 y 0]
                 (if-let [found-x (->> (get input y)
                                       (keep-indexed (fn [i c] (when ((set (seq "<>^v")) c) i)))
                                       (first))]
                   [found-x y]
                   (recur x (inc y))))
      dirs [[0 -1] [1 0] [0 1] [-1 0]]]
  (loop [dir (string/index-of "^>v<" (look position))
         position position
         seen #{position}]
    (let [[x y] position
          [x- y-] (get dirs (mod dir (count dirs)))
          next [(+ x x-) (+ y y-)]]
      (condp = (look next)
        nil (inc (count seen))          ; done!
        \# (recur (inc dir) position seen)
        (recur dir next (conj seen position))))))
#+end_src

#+RESULTS:
: 4696

#+html:</details>

#+html:<details><summary>Part 2</summary>
#+begin_src clojure
(def board
  (let [input (string/split-lines (get-input "6"))
        look (fn [[x y]] (-> input (get y []) (get x nil)))]
    (-> (reduce (fn [state coord]
                  (condp = (look coord)
                    \. (update state :blanks conj coord)
                    \# (update state :blocks conj coord)
                    (update state :position (constantly [coord (string/index-of "^>v<" (look coord))]))))
                {:blocks #{} :blanks #{} :position nil}
                (for [x (range (count (first input)))
                      y (range (count input))]
                  [x y]))
        (assoc :width (count (first input)))
        (assoc :height (count input)))))

(defn check-board [new-block]
  (let [blocks (conj (:blocks board) new-block)
        dirs [[0 -1] [1 0] [0 1] [-1 0]]]
    (loop [ref (:position board)
           seen #{}]
      (let [[position dir-index] ref
            dir-index (mod dir-index (count dirs))
            [x y] position
            [x- y-] (get dirs dir-index)
            next [(+ x x-) (+ y y-)]
            within-board? (and (<= 0 (first next) (:width board))
                               (<= 0 (second next) (:height board)))]
        (cond
          (seen ref) true
          (not within-board?) nil
          (blocks next) (recur [position (inc dir-index)] (conj seen ref))
          :else (recur [next dir-index] (conj seen ref)))))) )

(count (remove nil? (pmap check-board (:blanks board))))
#+end_src

#+RESULTS:
: 1443

#+html:</details>

*** DONE Day 7: [[https://adventofcode.com/2024/day/7][Bridge Repair]]
CLOSED: [2024-12-15 Sun 07:33]

#+html:<details><summary>Part 1</summary>
#+begin_src clojure
(require '[clojure.math.combinatorics :as combo])

;; eg [[1 2 3] [- *]]
(defn solve [nums ops]
  (loop [current (first nums)
         nums (drop 1 nums)
         ops ops]
    ;; (prn nums ops)
    (if (= [] ops)
      current
      (let [[num & rest-nums] nums
            [op & rest-ops] ops]
        (recur (op current num) (vec rest-nums) (vec rest-ops))))))

(let [input (->> (string/split-lines (get-input "7"))
                 (map (fn [line] (keep parse-long (string/split line #":| ")))))]
  (->> input
       (filter (fn [[answer & inputs]]
                 (some (fn [ops] (= answer (solve inputs ops)))
                       (combo/permuted-combinations
                        (flatten (repeat (dec (count inputs)) [+ *]))
                        (dec (count inputs))))))
       (map first)
       (reduce +)))
#+end_src

#+RESULTS:
: 932137732557

#+html:</details>

#+html:<details><summary>Part 2</summary>
todo: this one is slow (~10s) - I think it's the speed of our concat-op, can we use
math instead?

#+begin_src clojure
(require '[clojure.math.combinatorics :as combo])

;; eg [[1 2 3] [- *]]
(defn solve [nums ops]
  (loop [current (first nums)
         nums (drop 1 nums)
         ops ops]
    ;; (prn nums ops)
    (if (= [] ops)
      current
      (let [[num & rest-nums] nums
            [op & rest-ops] ops]
        (recur (op current num) (vec rest-nums) (vec rest-ops))))))

(defn concat-op [n1 n2]
  (parse-long (str n1 n2)))

(let [input (->> (string/split-lines (get-input "7"))
                 (map (fn [line] (keep parse-long (string/split line #":| ")))))]
  (->> input
       (filter (fn [[answer & inputs]]
                 (some (fn [ops] (= answer (solve inputs ops)))
                       (combo/permuted-combinations
                        (flatten (repeat (dec (count inputs)) [+ * concat-op]))
                        (dec (count inputs))))))
       (map first)
       (reduce +)))
#+end_src
#+html:</details>

#+RESULTS:
: 661823605105500

*** TODO Day 8: [[https://adventofcode.com/2024/day/8][Resonant Collinearity]]

#+html:<details><summary>Part 1</summary>
#+begin_src clojure
(require '[clojure.math.combinatorics :as combo])

(let [input (string/split-lines (get-input "8"))
      w (count (first input))
      h (count input)
      look (fn [[x y]] (-> input (get y []) (get x nil)))
      within? (fn [[x y]] (and (<= 0 x (dec w)) (<= 0 y (dec h))))
      antinodes (fn [coords]
                  (let [[[x1 y1] [x2 y2]] coords
                        distance (Math/round
                                  (Math/sqrt (+ (* (- x2 x1) (- x2 x1))
                                                (* (- y2 y1) (- y2 y1)))))]
                    ;; port of https://stackoverflow.com/a/7741655
                    [[(+ x2 (* distance (/ (- x2 x1) distance)))
                      (+ y2 (* distance (/ (- y2 y1) distance)))]
                     [(- x1 (* distance (/ (- x2 x1) distance)))
                      (- y1 (* distance (/ (- y2 y1) distance)))]]
                    ))
      antennae (atom {})
      ;; oof
      _ (doseq [x (range w)
                y (range h)
                :when (not (or (= (look [x y]) \.)
                               (= (look [x y]) \#)))]
          (swap! antennae update (look [x y]) #(conj % [x y])))]

  (->> @antennae
       (mapcat (fn [[_ coords]]
                 (->> (combo/combinations coords 2)
                      (mapcat (fn [coords] (filter within? (antinodes coords)))))))
       (set)
       (count)

       ;; debug print
       ;; (reduce (fn [grid anti-coord] (update-in grid (reverse anti-coord) (constantly \#)))
       ;;         (mapv (comp vec seq) input))
       ;; (map (partial apply str))
       ;; (string/join "\n")
       ;; (println)
       ))
#+end_src

#+RESULTS:
: 369

#+html:</details>

#+html:<details><summary>Part 2</summary>
#+begin_src clojure
;; in progress
(require '[clojure.math.combinatorics :as combo])

(defn antinodes-out [coords direction times]
  (if (or (some neg? (first coords))
          (zero? times))
    coords
    (let [[[x2 y2] [x1 y1] & _] coords
          distance (Math/round
                    (Math/sqrt (+ (* (- x2 x1) (- x2 x1))
                                  (* (- y2 y1) (- y2 y1)))))]
      ;; port of https://stackoverflow.com/a/7741655
      (recur
       (vec (concat
             [[(long (direction (if (= direction +) x2 x1) (* distance (/ (- x2 x1) distance))))
               (long (direction (if (= direction) y2 y1) (* distance (/ (- y2 y1) distance))))]]
             coords))
       direction
       (dec times)))))

(defn antinodes-out-new [coords direction times]
  (if (or (some neg? (first coords))
          (zero? times))
    coords
    (let [[two one & _] coords]
      ;; port of https://stackoverflow.com/a/7741655
      (recur
       (vec (concat [(map direction (map - one two) two)]
                    coords
                    ))
       #_(vec (concat
               [[(long (direction (if (= direction +) x2 x1) (* distance (/ (- x2 x1) distance))))
                 (long (direction (if (= direction) y2 y1) (* distance (/ (- y2 y1) distance))))]]
               coords))
       direction
       (dec times)))))

(let [input (string/split-lines (get-input "8_example"))
      w (count (first input))
      h (count input)
      look (fn [[x y]] (-> input (get y []) (get x nil)))
      within? (fn [[x y]] (and (<= 0 x (dec w)) (<= 0 y (dec h))))
      antinodes (fn [coords]
                  (concat
                   (antinodes-out-new coords + 90)
                   (antinodes-out-new coords - 90)))
      antennae (atom {})
      ;; oof
      _ (doseq [x (range w)
                y (range h)
                :when (not (or (= (look [x y]) \.)
                               (= (look [x y]) \#)))]
          (swap! antennae update (look [x y]) #(conj % [x y])))]

  (->> @antennae
       (mapcat (fn [[_ coords]]
                 (->> (combo/combinations coords 2)
                      (mapcat (fn [coords] (filter within? (antinodes coords)))))))
       (set)

       ;; (count)

       ;; debug print
       (reduce (fn [grid anti-coord] (update-in grid (reverse anti-coord) (constantly \#)))
               (mapv (comp vec seq) input))
       (map (partial apply str))
       (string/join "\n")
       (println)

       )

  (println "-")
  )

;; 1161 - too low


;; 734 - too low
#+end_src
#+html:</details>

*** TODO Day 9: [[https://adventofcode.com/2024/day/9][Disk Fragmenter]]

#+html:<details><summary>Part 1</summary>
#+begin_src clojure
;; in progress
;; naive
;; [[id count][nil count]....]

;; [[id count][nil count]....]

(defn read-disk-sum [input-key]
  (loop [nums (map Integer/parseInt (re-seq #"\d" (get-input input-key)))
         id 0
         block? true
         index 0
         result []]
    (if (empty? nums)
      result
      (recur (drop 1 nums)
             (if block? id (inc id))
             (not block?)
             (+ index )
             (inc index)
             (if block? (conj result [index (first nums)]) result)

             #_(conj result
                     (if block?
                       (repeat (first nums) id)
                       [[(first nums)]]
                       )
                     ;; (repeat (first nums) (if block? id nil))
                     )
             ;; (conj result [(if block? id nil) (first nums)])
             ))))

(#'user/read-empty "9_example")

(defn read-disk [input-key]
  (loop [nums (map Integer/parseInt (re-seq #"\d" (get-input input-key)))
         id 0
         block? true
         result []]
    (if (empty? nums)
      result
      (recur (drop 1 nums)
             (if block? id (inc id))
             (not block?)
             (concat result
                     (if block?
                       (repeat (first nums) id)
                       [[(first nums)]]
                       )
                     ;; (repeat (first nums) (if block? id nil))
                     )
             ;; (conj result [(if block? id nil) (first nums)])
             ))))

(defn balance [disk]
  )

(defn checksum [disk]
  (reduce
   )
  )

(count
 (let)
 (read-disk "9_example")

 [[0 2] [9 5]
  ;; [nil 1]
  [1 3]
  [nil 3] [2 1] [nil 3] [3 3] [nil 1] [4 2] [nil 1] [5 4] [nil 1] [6 4] [nil 1] [7 3] [nil 1] [8 4] [nil 0] [9 2]]

 )


;; spent some time thinking about a clever way to check
(let [disk (read-disk "9")

      length (count (filter number? disk))
      ]

  (->> (loop [disk disk]
         (if (= (count (first (split-with number? disk))) length)
           disk
           (let [[p1 p2] (split-with number? disk)]
             (recur (concat p1 (list (last p2)) (->> p2 (drop 1) (drop-last 1)))))))
       ;; (apply str)
       (reduce (fn [[i sum] id]
                 [(inc i) (+ sum (* i id))])
               [0 0])
       (second)
       )

  ;; input
  )


;; todo
#+end_src

#+RESULTS:
: class clojure.lang.Compiler$CompilerException

#+html:</details>

*** DONE Day 10: [[https://adventofcode.com/2024/day/10][Hoof It]]
CLOSED: [2024-12-15 Sun 07:34]

#+html:<details><summary>Part 1 and 2</summary>
#+begin_src clojure
(def grid (->> (get-input "10")
               (string/split-lines)
               (map (partial re-seq #"\d"))
               (map (fn [row] (map Integer/parseInt row)))))

(defn look [[x y]] (-> grid (nth y []) (nth x nil)))

(defn peaks [coord]
  (let [looking-at (look coord)]
    (if (= looking-at 9)
      (apply str coord)
      (remove nil?
              (for [dir [[0 1] [0 -1] [-1 0] [1 0]]]
                (let [next (map + coord dir)]
                  (when (= (inc looking-at) (look next))
                    (peaks next))))))))

(->> (for [x (range (count (first grid)))
           y (range (count grid))
           :when (= 0 (look [x y]))]
       [x y])
     (map (fn [zero-coord]
            (->> (peaks zero-coord)
                 (flatten)
                 ((juxt distinct identity))
                 (map count))))
     (apply map +))
#+end_src

#+RESULTS:
: (776 1657)

#+html:</details>

*** TODO Day 11: [[https://adventofcode.com/2024/day/11][Plutonian Pebbles]]

#+html:<details><summary>Part 1</summary>
#+begin_src clojure
(defn step [n]
  (cond (zero? n) [1]
        (even? (-> n str count))
        (let [c (-> n str count (/ 2))]
          (map (comp Integer/parseInt (partial apply str))
               (split-at c (str n))))
        :else [(* n 2024)]))

(count
 (reduce
  (fn [acc _] (mapcat step acc))
  (map Integer/parseInt (re-seq #"\d+" (get-input "11")))
  (range 25)))
#+end_src

#+RESULTS:
: 199982

#+html:</details>

#+html:<details><summary>Part 2</summary>
#+begin_src clojure
;; in progress
;; todo: memoize with frequencies

(defn step [n]
  (if (zero? n)
    [1]
    (let [length (inc (int (Math/log10 n)))]
      (if-not (even? length)
        [(* n 2024)]
        [(int (Math/floor (/ n (Math/pow 10 (/ length 2)))))
         (int (Math/floor (mod n (Math/pow 10 (/ length 2)))))]))))

(defn step-times [times n]
  (if (zero? times)
    1
    (if (zero? n)
      (recur (dec times) 1)
      (let [length (inc (int (Math/log10 n)))]
        (if-not (even? length)
          (recur (dec times) (* n 2024))
          (+ (step-times (dec times) (int (Math/floor (/ n (Math/pow 10 (/ length 2))))))
             (step-times (dec times) (int (Math/floor (mod n (Math/pow 10 (/ length 2))))))))))))

(def step-times-memo (memoize step-times))

(step-times 2 10)

(apply +
       (map (partial step-times-memo 75)
            (map Integer/parseInt (re-seq #"\d+" (get-input "11")))

            ;; (count (step-times 75 (list 773)))
            ;; ((773) (79858) (0) (71) (213357) (2937) (1) (3998391))

            )

       ;; (step-times 25 [0])
       )

(def step-memo (memoize step))

(count
 (reduce
  (fn [acc _] (mapcat step-memo acc))
  (map Integer/parseInt (re-seq #"\d+" (get-input "11")))
  (range 75))))
#+end_src
#+html:</details>

*** Day 12: [[https://adventofcode.com/2024/day/12][Garden Groups]]

#+html:<details><summary>Part 1</summary>
#+begin_src clojure
;; in progress
;; I think shoving zipper in here is not the move

(require '[clojure.set :as set])
(require '[clojure.zip :as zip])


;; zipper creation args
;; ::: branch? children make-node root
(def grid (string/split-lines (get-input "12")))

(defn look [[x y]] (-> grid (nth y []) (nth x nil)))

(defn neighbors [coord]
  (for [dir [[0 1] [1 0] [0 -1] [-1 0]]]
    (mapv + coord dir)))

(defn region-zipper [coord]
  (let [char (look coord)]
    (zip/zipper
     ;; branch? is a fn that, given a node, returns true if can have children, even if it currently doesn't.
     (fn [[coord parents]]
       (and coord
            (seq (set/difference (set (neighbors coord)) parents))
            (= char (look coord))))
     ;; children is a fn that, given a branch node, returns a seq of its children.
     (fn [[coord parents]]
       ;; (map #(list % (conj parents coord) ) (neighbors coord))
       (let [children (->> (neighbors coord)
                           (remove parents)
                           (filter #(= char (look %))))
             more (map (fn [child]
                         [child (apply conj parents coord
                                       (remove #(= % child) children))])
                       children)
             ]
         ;; println
         ;; format "children: [%s -> %s]" coord
         ;; (map pr-str (map first more))
         (prn coord more)
         more

         ))
     ;; make-node is a fn that, given an existing node and a seq of children, returns a new branch node with the supplied children.
     (fn [node _]
       node
       #_(let [[coord seen] node]
           [coord seen]
           ;; [coord (apply set/union seen (map second children) )]
           ))
     ;; root is the root node.
     [coord #{}])))

(->
 (region-zipper [42 78])
 (zip/next)
 ;; (zip/down)
 ;; (zip/node) ;; ([42 79] #{[42 78]})
 (zip/children)
 )

(defn read-region [coord]
  (println (format "Reading region %s " coord) )
  (->> (region-zipper coord)
       ;; (region-zipper [42 78])
       (iterate zip/next)
       (take-while #(not (zip/end? %))) ;; Zipper's "end of iteration" condition.
       (map zip/node)
       (keep first)
       (set)
       ;; (count)
       )
  #_(println (format "Reading region %s ... done" coord) ))

(defn perimeter [points]
  ;; claude gave me a logic pointer here
  (->> points
       (map (fn [point]
              (apply + (for [dir [[0 1] [0 -1] [1 0] [-1 0]]]
                         (if (points (mapv + dir point))
                           0 1)))))
       (reduce +)))

(defn score-region [r]
  (* (count r)
     (perimeter r)))

;; lazy
(->> (loop [points (set (for [x (range (count (first grid)))
                              y (range (count grid))]
                          [x y]))
            regions []]
       (if (empty? points)
         regions
         (let [new-region (read-region (first points))]
           (prn (count points) (first points) new-region)
           (recur (set/difference points new-region)
                  (conj regions new-region)))))
     (map score-region)
     (reduce +)
     ;; (count)
     )

(read-region [0 0 ])

1373
#+end_src
#+html:</details>
